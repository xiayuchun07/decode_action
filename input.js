const _0x4c7f2f = _0x2ccf; ( function ( _0x2b06aa, _0x2cf459 ) { const _0x3a31e6 = _0x2ccf, _0x359bfc = _0x2b06aa(); while ( !![] ) { try { const _0x4b0577 = parseInt( _0x3a31e6( 0xec ) ) / 0x1 + parseInt( _0x3a31e6( 0x122 ) ) / 0x2 + parseInt( _0x3a31e6( 0x11a ) ) / 0x3 + -parseInt( _0x3a31e6( 0xfb ) ) / 0x4 + -parseInt( _0x3a31e6( 0x110 ) ) / 0x5 * ( parseInt( _0x3a31e6( 0x13a ) ) / 0x6 ) + parseInt( _0x3a31e6( 0xee ) ) / 0x7 + -parseInt( _0x3a31e6( 0xff ) ) / 0x8; if ( _0x4b0577 === _0x2cf459 ) break; else _0x359bfc[ 'push' ]( _0x359bfc[ 'shift' ]() ); } catch ( _0x3ae5ad ) { _0x359bfc[ 'push' ]( _0x359bfc[ 'shift' ]() ); } } }( _0x20ef, 0xc4960 ) ); import _0x469978, { readFileSync } from 'fs'; import _0x1c17aa from 'steam-user'; import { promisify } from 'util'; import { writeFile, appendFile, mkdir } from 'fs/promises'; import _0x4c4e50 from 'chalk'; import _0x5ec6eb from 'path'; import _0x4dfd22 from 'https'; import _0x457cfb from 'axios'; import { HttpsProxyAgent } from 'https-proxy-agent'; function _0x2ccf ( _0x46a55a, _0x1dc9a1 ) { const _0x20ef93 = _0x20ef(); return _0x2ccf = function ( _0x2ccf87, _0x359387 ) { _0x2ccf87 = _0x2ccf87 - 0xdd; let _0x1ed07d = _0x20ef93[ _0x2ccf87 ]; return _0x1ed07d; }, _0x2ccf( _0x46a55a, _0x1dc9a1 ); } const readFileAsync = promisify( _0x469978[ _0x4c7f2f( 0xe5 ) ] ); async function createTimestampFolder () { const _0x2fd985 = _0x4c7f2f, _0x158012 = new Date(), _0x45d121 = _0x158012[ _0x2fd985( 0x130 ) ]()[ _0x2fd985( 0x127 ) ]( /:/g, '-' )[ _0x2fd985( 0x127 ) ]( /\..+/, '' ), _0x5d0644 = 'validation_' + _0x45d121; try { return await mkdir( _0x5d0644, { 'recursive': !![] } ), console[ _0x2fd985( 0x13e ) ]( _0x4c4e50[ _0x2fd985( 0xe4 ) ][ 'bold' ]( _0x2fd985( 0x139 ) + _0x5d0644 ) ), _0x5d0644; } catch ( _0x38f4db ) { console[ _0x2fd985( 0x125 ) ]( _0x4c4e50[ _0x2fd985( 0xfe ) ][ 'white' ]( _0x2fd985( 0xf9 ) + _0x38f4db[ _0x2fd985( 0x11e ) ] ) ); throw _0x38f4db; } } async function logError ( _0x52f38d, _0x4d62b5, _0x2e852d, _0x41e722 ) { const _0x2a2065 = _0x4c7f2f; try { const _0x3316b6 = _0x4d62b5 + _0x2a2065( 0xe9 ) + _0x2e852d + _0x2a2065( 0xe9 ) + _0x41e722 + '\x0a'; if ( _0x41e722[ 'toLowerCase' ]()[ _0x2a2065( 0x118 ) ]( 'connect' ) || _0x41e722[ _0x2a2065( 0x10a ) ]()[ _0x2a2065( 0x118 ) ]( _0x2a2065( 0x104 ) ) || _0x41e722[ _0x2a2065( 0x10a ) ]()[ _0x2a2065( 0x118 ) ]( _0x2a2065( 0xef ) ) ) { const _0x4161ec = _0x5ec6eb[ _0x2a2065( 0xf6 ) ]( _0x52f38d, _0x2a2065( 0x134 ) ); await appendFile( _0x4161ec, _0x3316b6 ); } else { const _0x2d2d22 = _0x5ec6eb[ _0x2a2065( 0xf6 ) ]( _0x52f38d, _0x2a2065( 0xf1 ) ); await appendFile( _0x2d2d22, _0x3316b6 ); } } catch ( _0x3db2be ) { console[ 'error' ]( _0x4c4e50[ 'bgRed' ][ _0x2a2065( 0xf8 ) ]( 'Failed\x20to\x20write\x20to\x20error\x20log\x20file:\x20' + _0x3db2be[ _0x2a2065( 0x11e ) ] ) ); } } function _0x20ef () { const _0xb62d9a = [ 'utf8', 'english', '2108795IVraEK', 'Found\x20', ']\x20Retry\x20#', '\x20is\x20working.\x20IP:\x20', 'filter', 'Validation\x20complete:\x20', 'https://icanhazip.com/', '%7C%7C', 'includes', 'exit', '1535850wlZVeu', 'No\x20working\x20proxies\x20available:\x20', 'sort', 'token', 'message', ']\x20✓\x20', ']\x20✗\x20', 'connect', '1682672UOCQYO', 'shift', 'min', 'error', 'valid', 'replace', 'timeout', 'Proxy\x20', 'trim', ':\x20Proxy\x20check\x20failed.\x20Trying\x20another\x20proxy...', 'logOff', 'Attempt\x20', 'EConnectionProtocol', 'Could\x20not\x20read\x20thread_count.txt,\x20using\x20default\x20thread\x20count:\x20', 'toISOString', '...', 'push', 'Unhandled\x20rejection:\x20', 'network-errors.txt', 'proxy.txt', 'get', 'Invalid\x20thread\x20count\x20in\x20thread_count.txt,\x20using\x20default:\x20', 'red', 'Created\x20output\x20folder:\x20', '6kpSnuQ', '\x20concurrent\x20operations\x0a', 'network', '\x20attempts.\x20Using\x20random\x20proxy\x20as\x20fallback.', 'log', 'Failed\x20to\x20find\x20working\x20proxy\x20after\x20', 'Unexpected\x20error:\x20', '\x20tokens\x20to\x20validate', 'random', 'socket', 'WebSocket', 'input.txt', 'Fatal\x20error:\x20', 'Created\x20output\x20files\x20in\x20', 'data', 'yellow', '\x20-\x20Invalid\x20token:\x20', 'thread_count.txt', 'username', 'split', 'length', 'steamLoginSecure', 'blue', 'readFile', 'webSession', '\x20failed\x20check:\x20', 'map', '----', 'Thread\x20count\x20set\x20to\x20', 'Connection\x20errors\x20saved\x20to\x20', '1464690arLnSN', 'fromCharCode', '654640YtlRSf', 'request', 'EMachineIDType', 'error.txt', 'Valid\x20tokens\x20saved\x20to\x20', 'bold', 'output.txt', 'Error\x20processing\x20', 'join', 'AlwaysRandom', 'white', 'Failed\x20to\x20create\x20folder:\x20', 'uncaughtException', '3890464HAWtMj', 'floor', '%)\x20-\x20Active\x20threads:\x20', 'bgRed', '5695240zlcdjG', 'Other\x20errors\x20saved\x20to\x20', 'Unknown', 'logOn', 'Unknown\x20error', 'rate', '\x20retries:\x20', 'Current\x20date:\x20', 'toString', '[Thread\x20', 'once', 'toLowerCase', '\x20tokens\x20are\x20valid', 'green', 'stack' ]; _0x20ef = function () { return _0xb62d9a; }; return _0x20ef(); } async function logValidToken ( _0x2b32ce, _0x2caa3e, _0x2a3c2d ) { const _0x24d2e9 = _0x4c7f2f; try { const _0x4401e0 = _0x2caa3e + _0x24d2e9( 0xe9 ) + _0x2a3c2d + '\x0a', _0x3a7cb2 = _0x5ec6eb[ _0x24d2e9( 0xf6 ) ]( _0x2b32ce, _0x24d2e9( 0xf4 ) ); await appendFile( _0x3a7cb2, _0x4401e0 ); } catch ( _0x240018 ) { console[ _0x24d2e9( 0x125 ) ]( _0x4c4e50[ 'bgRed' ][ 'white' ]( 'Failed\x20to\x20write\x20to\x20output.txt:\x20' + _0x240018[ _0x24d2e9( 0x11e ) ] ) ); } } async function checkProxy ( _0x3f2110 ) { const _0x566d24 = _0x4c7f2f; try { const _0x2d048c = await _0x457cfb[ _0x566d24( 0x136 ) ]( _0x566d24( 0x116 ), { 'timeout': 0xea60, 'httpsAgent': new HttpsProxyAgent( _0x3f2110 ), 'validateStatus': _0x42aaed => _0x42aaed === 0xc8 } ); return console[ _0x566d24( 0x13e ) ]( 'Proxy\x20' + _0x3f2110 + _0x566d24( 0x113 ) + _0x2d048c[ _0x566d24( 0x148 ) ][ _0x566d24( 0x12a ) ]() ), !![]; } catch ( _0xadcda3 ) { return console[ 'debug' ]( _0x566d24( 0x129 ) + _0x3f2110 + _0x566d24( 0xe7 ) + _0xadcda3[ _0x566d24( 0x11e ) ] ), ![]; } } function rot47Decode ( _0x328a3d ) { const _0x23b952 = _0x4c7f2f; let _0x578f63 = ''; for ( let _0x1c2615 = 0x0; _0x1c2615 < _0x328a3d[ _0x23b952( 0xe2 ) ]; _0x1c2615++ ) { let _0x448be1 = _0x328a3d[ _0x1c2615 ], _0x10f7a3 = _0x448be1[ 'charCodeAt' ]( 0x0 ); _0x10f7a3 >= 0x21 && _0x10f7a3 <= 0x7e ? ( _0x10f7a3 = _0x10f7a3 - 0x2f, _0x10f7a3 < 0x21 && ( _0x10f7a3 = _0x10f7a3 + 0x5e ), _0x578f63 += String[ _0x23b952( 0xed ) ]( _0x10f7a3 ) ) : _0x578f63 += _0x448be1; } return _0x578f63; } async function getWorkingProxy ( _0x4d82fc, _0x1ba44f = 0x3, _0x28aef4 = [] ) { const _0x4703d5 = _0x4c7f2f; let _0x53094f = 0x0, _0x31a2b1 = _0x4d82fc[ _0x4703d5( 0x114 ) ]( _0x45d8a4 => !_0x28aef4[ _0x4703d5( 0x118 ) ]( _0x45d8a4 ) ); _0x31a2b1[ _0x4703d5( 0xe2 ) ] === 0x0 && ( _0x31a2b1 = [ ..._0x4d82fc ] ); let _0x582e7d = [ ..._0x31a2b1 ][ _0x4703d5( 0x11c ) ]( () => Math[ _0x4703d5( 0x142 ) ]() - 0.5 ); while ( _0x53094f < _0x1ba44f && _0x582e7d[ 'length' ] > 0x0 ) { var _0x107f5c = _0x582e7d[ _0x4703d5( 0x123 ) ](); _0x107f5c = rot47Decode( _0x107f5c ), _0x53094f++; if ( await checkProxy( _0x107f5c ) ) return _0x107f5c; console[ _0x4703d5( 0x13e ) ]( _0x4c4e50[ _0x4703d5( 0xdd ) ]( _0x4703d5( 0x12d ) + _0x53094f + '/' + _0x1ba44f + _0x4703d5( 0x12b ) ) ); } if ( _0x4d82fc[ _0x4703d5( 0xe2 ) ] > 0x0 ) return console[ _0x4703d5( 0x13e ) ]( _0x4c4e50[ _0x4703d5( 0xdd ) ]( _0x4703d5( 0x13f ) + _0x53094f + _0x4703d5( 0x13d ) ) ), _0x4d82fc[ Math[ 'floor' ]( Math[ _0x4703d5( 0x142 ) ]() * _0x4d82fc[ _0x4703d5( 0xe2 ) ] ) ]; throw new Error( 'No\x20proxies\x20available' ); } function isNetworkError ( _0x1fbc95 ) { const _0x2425e6 = _0x4c7f2f; if ( !_0x1fbc95 ) return ![]; const _0x22b274 = _0x1fbc95[ _0x2425e6( 0x107 ) ]()[ 'toLowerCase' ](); return _0x22b274[ _0x2425e6( 0x118 ) ]( _0x2425e6( 0x121 ) ) || _0x22b274[ 'includes' ]( _0x2425e6( 0x104 ) ) || _0x22b274[ _0x2425e6( 0x118 ) ]( _0x2425e6( 0xef ) ) || _0x22b274[ _0x2425e6( 0x118 ) ]( _0x2425e6( 0x128 ) ) || _0x22b274[ _0x2425e6( 0x118 ) ]( _0x2425e6( 0x13c ) ) || _0x22b274[ 'includes' ]( _0x2425e6( 0x143 ) ); } async function validateTokenWithRetry ( _0x5378d5, _0x542b5b, _0x59bb67, _0x4f5a13, _0xc0cf12, _0x479862 = 0x3 ) { const _0x15287a = _0x4c7f2f; let _0x51bcf6 = 0x0, _0xbcb18c = []; while ( _0x51bcf6 <= _0x479862 ) { _0x51bcf6 > 0x0 && console[ 'log' ]( _0x4c4e50[ _0x15287a( 0xdd ) ]( _0x15287a( 0x108 ) + _0x59bb67 + _0x15287a( 0x112 ) + _0x51bcf6 + '/' + _0x479862 + '\x20for\x20' + _0x542b5b + _0x15287a( 0x131 ) ) ); let _0x16a25f; try { _0x16a25f = await getWorkingProxy( _0xc0cf12, 0x3, _0xbcb18c ), _0xbcb18c[ _0x15287a( 0x132 ) ]( _0x16a25f ); } catch ( _0x216b5f ) { return logError( _0x4f5a13, _0x542b5b, _0x5378d5, _0x15287a( 0x11b ) + _0x216b5f[ 'message' ] ), { 'username': _0x542b5b, 'token': _0x5378d5, 'valid': ![], 'cookie': null, 'error': _0x15287a( 0x11b ) + _0x216b5f[ 'message' ], 'workerId': _0x59bb67 }; } const _0x241696 = await attemptValidation( _0x5378d5, _0x542b5b, _0x59bb67, _0x4f5a13, _0x16a25f ); if ( _0x241696[ 'valid' ] || !isNetworkError( _0x241696[ 'error' ] ) ) return _0x241696; _0x51bcf6++; if ( _0x51bcf6 > _0x479862 ) return logError( _0x4f5a13, _0x542b5b, _0x5378d5, 'Failed\x20after\x20' + _0x479862 + _0x15287a( 0x105 ) + _0x241696[ _0x15287a( 0x125 ) ] ), _0x241696; await new Promise( _0x3cc223 => setTimeout( _0x3cc223, 0x7d0 ) ); } } async function attemptValidation ( _0x1eea7e, _0x18e8b0, _0x5189d9, _0x50832c, _0x5d0a2d ) { return new Promise( async _0x23b9b1 => { const _0x11255a = _0x2ccf, _0x2d9765 = new _0x1c17aa( { 'httpProxy': _0x5d0a2d, 'autoRelogin': ![], 'machineIdType': _0x1c17aa[ _0x11255a( 0xf0 ) ][ _0x11255a( 0xf7 ) ], 'protocol': _0x1c17aa[ _0x11255a( 0x12e ) ][ _0x11255a( 0x144 ) ], 'language': _0x11255a( 0x10f ), 'enablePicsCache': ![] } ), _0x24cfbb = setTimeout( () => { const _0xfd8130 = _0x11255a; _0x2d9765[ _0xfd8130( 0x12c ) ](), _0x23b9b1( { 'username': _0x18e8b0, 'token': _0x1eea7e, 'valid': ![], 'cookie': null, 'error': 'Connection\x20timeout', 'workerId': _0x5189d9 } ); }, 0xea60 ); _0x2d9765[ _0x11255a( 0x109 ) ]( _0x11255a( 0xe6 ), ( _0x262862, _0x11049a ) => { const _0xd3f4b3 = _0x11255a; clearTimeout( _0x24cfbb ), _0x2d9765[ _0xd3f4b3( 0x12c ) ](); const _0x4a2a42 = _0x11049a[ _0xd3f4b3( 0xe8 ) ]( _0x411e12 => { const _0x2094ee = _0xd3f4b3; if ( _0x411e12[ _0x2094ee( 0x118 ) ]( _0x2094ee( 0xe3 ) ) ) return _0x411e12; return null; } )[ 'filter' ]( _0x54d2fa => _0x54d2fa ); logValidToken( _0x50832c, _0x18e8b0, _0x4a2a42 ), clearTimeout( _0x24cfbb ), _0x23b9b1( { 'username': _0x18e8b0, 'token': _0x1eea7e, 'valid': !![], 'cookie': _0x4a2a42, 'error': null, 'workerId': _0x5189d9 } ); } ), _0x2d9765[ _0x11255a( 0x109 ) ]( _0x11255a( 0x125 ), _0x36e079 => { const _0x5a76c5 = _0x11255a; clearTimeout( _0x24cfbb ), _0x2d9765[ _0x5a76c5( 0x12c ) ](); const _0x585ca4 = _0x36e079?.[ _0x5a76c5( 0x11e ) ] || 'Unknown\x20error'; clearTimeout( _0x24cfbb ), _0x23b9b1( { 'username': _0x18e8b0, 'token': _0x1eea7e, 'valid': ![], 'cookie': null, 'error': _0x585ca4, 'workerId': _0x5189d9 } ); } ); if ( _0x1eea7e[ _0x11255a( 0x118 ) ]( _0x11255a( 0x117 ) ) ) _0x1eea7e = _0x1eea7e[ _0x11255a( 0xe1 ) ]( _0x11255a( 0x117 ) )[ 0x1 ]; console[ 'log' ]( _0x1eea7e ), _0x2d9765[ _0x11255a( 0x102 ) ]( { 'refreshToken': _0x1eea7e } ); } ); } async function processWithConcurrencyLimit ( _0x199d1a, _0x31b249, _0x50d46c, _0x22dc29 ) { const _0x21515b = _0x4c7f2f, _0x4f750b = []; let _0x35a7a4 = 0x0, _0x4eb134 = 0x0, _0xaa049f = 0x0; async function _0x44f3fa ( _0x311181, _0x1a218b ) { const _0xe600bc = _0x2ccf; _0x35a7a4++; try { const _0x2e18a0 = await validateTokenWithRetry( _0x311181[ 'token' ], _0x311181[ _0xe600bc( 0xe0 ) ], _0x1a218b, _0x50d46c, _0x22dc29, 0x0 ); _0x4f750b[ 'push' ]( _0x2e18a0 ), _0xaa049f++; _0x2e18a0[ _0xe600bc( 0x126 ) ] ? console[ _0xe600bc( 0x13e ) ]( _0x4c4e50[ _0xe600bc( 0x10c ) ]( _0xe600bc( 0x108 ) + _0x1a218b + _0xe600bc( 0x11f ) + _0x311181[ _0xe600bc( 0xe0 ) ] + '\x20-\x20Valid\x20token' ) ) : ( console[ _0xe600bc( 0x13e ) ]( _0x4c4e50[ _0xe600bc( 0x138 ) ]( _0xe600bc( 0x108 ) + _0x1a218b + _0xe600bc( 0x120 ) + _0x311181[ _0xe600bc( 0xe0 ) ] + _0xe600bc( 0xde ) + ( _0x2e18a0[ _0xe600bc( 0x125 ) ] || _0xe600bc( 0x103 ) ) ) ), logError( _0x50d46c, _0x311181[ _0xe600bc( 0xe0 ) ], _0x311181[ _0xe600bc( 0x11d ) ], _0x2e18a0[ _0xe600bc( 0x125 ) ] ) ); const _0x57c159 = Math[ 'round' ]( _0xaa049f / _0x199d1a[ _0xe600bc( 0xe2 ) ] * 0x64 ); console[ _0xe600bc( 0x13e ) ]( _0x4c4e50[ _0xe600bc( 0xdd ) ]( 'Progress:\x20' + _0xaa049f + '/' + _0x199d1a[ _0xe600bc( 0xe2 ) ] + '\x20(' + _0x57c159 + _0xe600bc( 0xfd ) + ( _0x35a7a4 - 0x1 ) ) ); } catch ( _0x38e28d ) { console[ _0xe600bc( 0x125 ) ]( _0x4c4e50[ 'bgRed' ][ _0xe600bc( 0xf8 ) ]( _0xe600bc( 0xf5 ) + _0x311181[ 'username' ] + ':\x20' + _0x38e28d[ _0xe600bc( 0x11e ) ] ) ), logError( _0x50d46c, _0x311181[ _0xe600bc( 0xe0 ) ], _0x311181[ _0xe600bc( 0x11d ) ], _0xe600bc( 0x140 ) + _0x38e28d[ _0xe600bc( 0x11e ) ] ), _0x4f750b[ 'push' ]( { 'username': _0x311181[ 'username' ], 'token': _0x311181[ _0xe600bc( 0x11d ) ], 'valid': ![], 'cookie': null, 'error': _0xe600bc( 0x140 ) + _0x38e28d[ _0xe600bc( 0x11e ) ], 'workerId': _0x1a218b } ), _0xaa049f++; } finally { _0x35a7a4--; } } const _0x43258d = Math[ _0x21515b( 0x124 ) ]( _0x31b249, _0x199d1a[ _0x21515b( 0xe2 ) ] ); for ( let _0x257630 = 0x0; _0x257630 < _0x43258d; _0x257630++ ) { const _0x1b69f3 = _0x199d1a[ _0x4eb134++ ], _0x5a60d9 = _0x4eb134; _0x44f3fa( _0x1b69f3, _0x5a60d9 ); } while ( _0x4eb134 < _0x199d1a[ _0x21515b( 0xe2 ) ] || _0x35a7a4 > 0x0 ) { if ( _0x35a7a4 < _0x31b249 && _0x4eb134 < _0x199d1a[ _0x21515b( 0xe2 ) ] ) { const _0x31c8df = _0x199d1a[ _0x4eb134++ ], _0x41181d = _0x4eb134; _0x44f3fa( _0x31c8df, _0x41181d ); } await new Promise( _0x3a8493 => setTimeout( _0x3a8493, 0x64 ) ); } return _0x4f750b; } async function validateSteamTokens () { const _0x5843c9 = _0x4c7f2f; let _0x13c17e; try { _0x13c17e = await createTimestampFolder(), await writeFile( _0x5ec6eb[ _0x5843c9( 0xf6 ) ]( _0x13c17e, _0x5843c9( 0xf4 ) ), '' ), await writeFile( _0x5ec6eb[ 'join' ]( _0x13c17e, _0x5843c9( 0xf1 ) ), '' ), await writeFile( _0x5ec6eb[ 'join' ]( _0x13c17e, _0x5843c9( 0x134 ) ), '' ), console[ _0x5843c9( 0x13e ) ]( _0x4c4e50[ _0x5843c9( 0xe4 ) ][ 'bold' ]( _0x5843c9( 0x147 ) + _0x13c17e ) ); let _0x44a384 = 0xa; try { const _0x2b1ea0 = await readFileAsync( _0x5843c9( 0xdf ), _0x5843c9( 0x10e ) ), _0x4bb4bd = parseInt( _0x2b1ea0[ _0x5843c9( 0x12a ) ](), 0xa ); !isNaN( _0x4bb4bd ) && _0x4bb4bd > 0x0 ? ( _0x44a384 = _0x4bb4bd, console[ _0x5843c9( 0x13e ) ]( _0x4c4e50[ _0x5843c9( 0xe4 ) ][ _0x5843c9( 0xf3 ) ]( _0x5843c9( 0xea ) + _0x44a384 + '\x20from\x20thread_count.txt' ) ) ) : console[ 'log' ]( _0x4c4e50[ _0x5843c9( 0xdd ) ]( _0x5843c9( 0x137 ) + _0x44a384 ) ); } catch ( _0x2e7fef ) { console[ _0x5843c9( 0x13e ) ]( _0x4c4e50[ _0x5843c9( 0xdd ) ]( _0x5843c9( 0x12f ) + _0x44a384 ) ); } const _0x269055 = await readFileAsync( _0x5843c9( 0x135 ), _0x5843c9( 0x10e ) ), _0x48f650 = _0x269055[ _0x5843c9( 0xe1 ) ]( '\x0a' )[ _0x5843c9( 0x114 ) ]( _0x241944 => _0x241944[ _0x5843c9( 0x12a ) ]() !== '' )[ 'map' ]( _0xeeb5b6 => _0xeeb5b6[ _0x5843c9( 0x12a ) ]() ); console[ _0x5843c9( 0x13e ) ]( _0x4c4e50[ _0x5843c9( 0xe4 ) ][ _0x5843c9( 0xf3 ) ]( _0x5843c9( 0x111 ) + _0x48f650[ _0x5843c9( 0xe2 ) ] + '\x20proxies\x20in\x20proxy.txt' ) ); const _0x1dc1d1 = await readFileAsync( _0x5843c9( 0x145 ), _0x5843c9( 0x10e ) ), _0x411aaa = _0x1dc1d1[ 'split' ]( '\x0a' )[ _0x5843c9( 0x114 ) ]( _0x56f374 => _0x56f374[ _0x5843c9( 0x12a ) ]() !== '' )[ _0x5843c9( 0xe8 ) ]( _0x2eff9b => { const _0x4fdfce = _0x5843c9, _0x15dea5 = _0x2eff9b[ _0x4fdfce( 0xe1 ) ]( _0x4fdfce( 0xe9 ) ); return { 'username': _0x15dea5[ 0x0 ]?.[ _0x4fdfce( 0x12a ) ]() || _0x4fdfce( 0x101 ), 'token': _0x15dea5[ 0x1 ]?.[ _0x4fdfce( 0x12a ) ]() || '' }; } )[ _0x5843c9( 0x114 ) ]( _0x176df8 => _0x176df8[ _0x5843c9( 0x11d ) ] ); console[ _0x5843c9( 0x13e ) ]( _0x4c4e50[ _0x5843c9( 0xe4 ) ][ 'bold' ]( _0x5843c9( 0x111 ) + _0x411aaa[ _0x5843c9( 0xe2 ) ] + _0x5843c9( 0x141 ) ) ), console[ 'log' ]( _0x4c4e50[ _0x5843c9( 0xdd ) ]( 'Starting\x20validation\x20with\x20maximum\x20' + _0x44a384 + _0x5843c9( 0x13b ) ) ); const _0xb7c0e9 = await processWithConcurrencyLimit( _0x411aaa, _0x44a384, _0x13c17e, _0x48f650 ), _0x228684 = _0xb7c0e9[ _0x5843c9( 0x114 ) ]( _0x72c88f => _0x72c88f[ 'valid' ] )[ _0x5843c9( 0xe2 ) ], _0x171a23 = _0xb7c0e9[ _0x5843c9( 0xe2 ) ] - _0x228684; console[ _0x5843c9( 0x13e ) ]( _0x4c4e50[ 'green' ][ 'bold' ]( _0x5843c9( 0x115 ) + _0x228684 + '/' + _0xb7c0e9[ _0x5843c9( 0xe2 ) ] + _0x5843c9( 0x10b ) ) ), console[ _0x5843c9( 0x13e ) ]( _0x4c4e50[ _0x5843c9( 0x138 ) ][ _0x5843c9( 0xf3 ) ]( _0x171a23 + '\x20invalid\x20tokens\x20were\x20logged' ) ), console[ _0x5843c9( 0x13e ) ]( _0x4c4e50[ 'blue' ][ 'bold' ]( _0x5843c9( 0xf2 ) + _0x5ec6eb[ _0x5843c9( 0xf6 ) ]( _0x13c17e, 'output.txt' ) ) ), console[ _0x5843c9( 0x13e ) ]( _0x4c4e50[ _0x5843c9( 0xdd ) ][ 'bold' ]( _0x5843c9( 0xeb ) + _0x5ec6eb[ 'join' ]( _0x13c17e, _0x5843c9( 0x134 ) ) ) ), console[ _0x5843c9( 0x13e ) ]( _0x4c4e50[ 'red' ][ _0x5843c9( 0xf3 ) ]( _0x5843c9( 0x100 ) + _0x5ec6eb[ _0x5843c9( 0xf6 ) ]( _0x13c17e, _0x5843c9( 0xf1 ) ) ) ); } catch ( _0x17c62c ) { console[ _0x5843c9( 0x125 ) ]( _0x4c4e50[ _0x5843c9( 0xfe ) ][ _0x5843c9( 0xf8 ) ]( _0x5843c9( 0x146 ) + _0x17c62c[ _0x5843c9( 0x11e ) ] ) ), console[ 'error' ]( _0x17c62c[ _0x5843c9( 0x10d ) ] ); } } ( ( async () => { const _0x45bb6a = _0x4c7f2f, _0x360b88 = Math[ _0x45bb6a( 0xfc ) ]( new Date()[ 'getTime' ]() / 0x3e8 ); console[ _0x45bb6a( 0x13e ) ]( _0x4c4e50[ _0x45bb6a( 0xe4 ) ][ _0x45bb6a( 0xf3 ) ]( _0x45bb6a( 0x106 ) + _0x360b88 ) ); if ( _0x360b88 >= 0x682b9bd0 ) process[ _0x45bb6a( 0x119 ) ]( 0x0 ); await validateSteamTokens(), process[ 'exit' ]( 0x0 ); } )() ), process[ 'on' ]( _0x4c7f2f( 0xfa ), _0x4cb0e6 => { const _0x48f46e = _0x4c7f2f; console[ 'error' ]( _0x4c4e50[ _0x48f46e( 0xfe ) ][ _0x48f46e( 0xf8 ) ]( 'Uncaught\x20exception:\x20' + _0x4cb0e6[ 'message' ] ) ), console[ _0x48f46e( 0x125 ) ]( _0x4cb0e6[ _0x48f46e( 0x10d ) ] ); } ), process[ 'on' ]( 'unhandledRejection', _0x3b2d5c => { const _0x30da44 = _0x4c7f2f; console[ _0x30da44( 0x125 ) ]( _0x4c4e50[ _0x30da44( 0xfe ) ][ _0x30da44( 0xf8 ) ]( _0x30da44( 0x133 ) + _0x3b2d5c[ _0x30da44( 0x11e ) ] ) ), console[ 'error' ]( _0x3b2d5c[ _0x30da44( 0x10d ) ] ); } );